plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.github.node-gradle.node" version "3.3.0" // node를 사용할 수 있게 해주는 플러그인
}


group = 'com.fastcampus.project'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

node {
	nodeModulesDir = file("$projectDir/front-end")
	version = '18.3.0'
	download = true
}

task npmBuild(type: NpmTask) { //  task는 gradle에서 실행할 수 있는 명령어이다. 이는 npm을 실행할 수 있게 해준다.
	args = ['run', "build"]
} // npm run build를 할 때 필요한 명령어

task copyFrontEnd(type: Copy) {
	from "$projectDir/front-end/static" // 'front-end/static' 폴더에서
	into 'build/resources/main/static/.' // 'build/resources/main/static' 폴더로 복사한다.
}

task cleanFrontEnd(type: Delete) {
	delete "$projectDir/front-end/static", "$projectDir/front-end/node_modules" // 'front-end/static' 폴더와 'front-end/node_modules' 폴더를 삭제한다.
}

//npmBuild.dependsOn npmInstall
//copyFrontEnd.dependsOn npmBuild
//compileJava.dependsOn copyFrontEnd
//
//clean.dependsOn cleanFrontEnd